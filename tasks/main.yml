---
- name: Check if VMs are correct
  fail:
    msg: "'vms' variable does not contain mandatory parameter '{{ item[1] }}'"
  when: item[1] not in item[0]
  with_nested:
    - "{{ vms }}"
    - ['name', 'profile']

- block:
  - name: Login to oVirt
    ovirt_auth_26:
      url: "{{ engine_url | default(lookup('env','OVIRT_URL')) | default(omit) }}"
      hostname: "{{ engine_fqdn | default(lookup('env','OVIRT_HOSTNAME')) | default(omit) }}"
      username: "{{ engine_user | default(lookup('env','OVIRT_USERNAME')) | default(omit) }}"
      password: "{{ engine_password | default(lookup('env','OVIRT_PASSWORD')) | default(omit) }}"
      ca_file: "{{ engine_cafile | default(lookup('env','OVIRT_CAFILE')) | default(omit) }}"
      insecure: "{{ engine_insecure | default(true) }}"
    when: ovirt_auth is undefined or not ovirt_auth
    register: loggedin

  - name: Split list of VMs
    set_fact:
      create_vms: "{{ create_vms | default([]) + [item]}}"
    with_items: "{{ vms }}"
    when: (item.state is defined and item.state != 'absent') or (item.profile.state is defined and item.profile.state != 'absent') or (item.state is undefined and item.profile.state is undefined)

  # to_json|from_json in vms is WA for: https://github.com/ansible/ansible/issues/27299
  - name: Apply tags from VM profiles
    ovirt_tags:
      auth: "{{ ovirt_auth }}"
      name: "{{ item }}"
      vms: "{{ vms|to_json|from_json|json_query(query)|map(attribute='name') | list }}"
    with_items: "{{ vms | selectattr('tag', 'defined') | map(attribute='tag') | list | unique }}"
    vars:
      query: "[?contains(tag, '{{ item }}')]"

  - name: Apply tags from VMs
    ovirt_tags:
      auth: "{{ ovirt_auth }}"
      name: "{{ item }}"
      vms: "{{ vms|to_json|from_json|json_query(query)|map(attribute='name') | list }}"
    with_items: "{{ vms | selectattr('profile', 'defined') | map(attribute='profile') | selectattr('tag', 'defined') | map(attribute='tag') | list | unique }}"
    vars:
      query: "[?contains(profile.tag, '{{ item }}')]"
      defined_vms: "{{ vms | selectattr('profile.tag', 'defined') | list | unique }}"
      
  - name: Manage VMs state
    include: manage_state.yml
    with_items: "{{ vms }}"
    loop_control:
      loop_var: "current_vm"

  - name: Wait for VMs to be started
    no_log: "{{ not debug_vm_create }}"
    async_status: "jid={{ item.ansible_job_id }}"
    register: job_result
    with_items: "{{ started_vms }}"
    until: job_result.finished
    retries: "{{ (vm_infra_create_all_timeout|int // vm_infra_create_poll_interval) + 1  }}"
    delay: "{{ vm_infra_create_poll_interval }}"

  - name: Apply any Affinity Groups
    import_tasks: affinity_groups.yml

  - name: Include create VM
    include_tasks: vm_state_present.yml
    when: create_vms is defined

  always:
    - name: Logout from oVirt
      ovirt_auth:
        state: absent
        ovirt_auth: "{{ ovirt_auth }}"
      when: not loggedin.skipped | default(false)
